{"remainingRequest":"C:\\CodeAcademyGit\\lessons\\Lesson69\\vue-vuex\\node_modules\\babel-loader\\lib\\index.js!C:\\CodeAcademyGit\\lessons\\Lesson69\\vue-vuex\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\CodeAcademyGit\\lessons\\Lesson69\\vue-vuex\\src\\store.js","dependencies":[{"path":"C:\\CodeAcademyGit\\lessons\\Lesson69\\vue-vuex\\src\\store.js","mtime":1601112716859},{"path":"C:\\CodeAcademyGit\\lessons\\Lesson69\\vue-vuex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\CodeAcademyGit\\lessons\\Lesson69\\vue-vuex\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\CodeAcademyGit\\lessons\\Lesson69\\vue-vuex\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport ApiService from '@/api/AppApi';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    user: {\n      id: '123',\n      name: 'John Doe'\n    },\n    categories: ['sustainability', 'nature', 'animal welfare', 'housing', 'education', 'food', 'community'],\n    eventsTotal: 0,\n    events: [],\n    event: {}\n  },\n  //sync - NO API/AXIOS/AJAX/FETCH calls!!!\n  mutations: {\n    // mutations with capslock and underscore\n    ADD_EVENT: function ADD_EVENT(state, event) {\n      state.events.push(event);\n    },\n    SET_EVENTS: function SET_EVENTS(state, events) {\n      state.events = events;\n    },\n    SET_EVENT: function SET_EVENT(state, event) {\n      state.event = event;\n    },\n    SET_EVENTS_TOTAL: function SET_EVENTS_TOTAL(state, eventsTotal) {\n      state.eventsTotal = eventsTotal;\n    }\n  },\n  // async - AXIOS/AJAX/FETCH :-)\n  // Form => Component => Actions => Mutations => State\n  actions: {\n    // snakeCase()\n    createEvent: function createEvent(_ref, event) {\n      var commit = _ref.commit;\n      // add event to DB on the server (json-server/fake server)\n      return ApiService.createEvent(event).then(function () {\n        commit('ADD_EVENT', event);\n      }); // add event to our state via mutation\n    },\n    // limit,page (url)\n    fetchEvents: function fetchEvents(_ref2, _ref3) {\n      var commit = _ref2.commit;\n      var perPage = _ref3.perPage,\n          page = _ref3.page;\n      ApiService.getEvents(perPage, page).then(function (response) {\n        commit('SET_EVENTS_TOTAL', parseInt(response.headers['x-total-count']));\n        commit('SET_EVENTS', response.data);\n      }).catch(function (error) {\n        console.log('Some error occurred' + error.response);\n      });\n    },\n    fetchEvent: function fetchEvent(_ref4, id) {\n      var commit = _ref4.commit,\n          getters = _ref4.getters;\n      var event = getters.getEventById(id);\n\n      if (event) {\n        commit('SET_EVENT', event);\n      } else {\n        ApiService.getEvent(id) // if we have the event in our local store(Vuex store)\n        .then(function (response) {\n          commit('SET_EVENT', response.data);\n        }).catch(function (error) {\n          console.log('Some error occurred' + error);\n        });\n      }\n    }\n  },\n  getters: {\n    getEventById: function getEventById(state) {\n      return function (id) {\n        return state.events.find(function (event) {\n          return event.id === id;\n        });\n      };\n    }\n  }\n});",{"version":3,"sources":["src\\store.js"],"names":["Vue","Vuex","ApiService","use","Store","state","user","id","name","categories","eventsTotal","events","event","mutations","ADD_EVENT","push","SET_EVENTS","SET_EVENT","SET_EVENTS_TOTAL","actions","createEvent","commit","then","fetchEvents","perPage","page","getEvents","parseInt","response","headers","data","catch","console","log","error","fetchEvent","getters","getEventById","getEvent","find"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEAF,IAAIG,GAAJ,CAAQF,IAAR;AAEA,eAAe,IAAIA,KAAKG,KAAT,CAAe;AAC5BC,SAAO;AACLC,UAAM;AAAEC,UAAI,KAAN;AAAaC,YAAM;AAAnB,KADD;AAELC,gBAAY,CACV,gBADU,EAEV,QAFU,EAGV,gBAHU,EAIV,SAJU,EAKV,WALU,EAMV,MANU,EAOV,WAPU,CAFP;AAWLC,iBAAa,CAXR;AAYLC,YAAQ,EAZH;AAaLC,WAAO;AAbF,GADqB;AAgB5B;AACAC,aAAW;AACT;AACAC,aAFS,qBAECT,KAFD,EAEQO,KAFR,EAEe;AACtBP,YAAMM,MAAN,CAAaI,IAAb,CAAkBH,KAAlB;AACD,KAJQ;AAKTI,cALS,sBAKEX,KALF,EAKSM,MALT,EAKiB;AACxBN,YAAMM,MAAN,GAAeA,MAAf;AACD,KAPQ;AAQTM,aARS,qBAQCZ,KARD,EAQQO,KARR,EAQe;AACtBP,YAAMO,KAAN,GAAcA,KAAd;AACD,KAVQ;AAWTM,oBAXS,4BAWQb,KAXR,EAWeK,WAXf,EAW4B;AACnCL,YAAMK,WAAN,GAAoBA,WAApB;AACD;AAbQ,GAjBiB;AAgC5B;AACA;AACAS,WAAS;AACP;AACAC,eAFO,6BAEiBR,KAFjB,EAEwB;AAAA,UAAjBS,MAAiB,QAAjBA,MAAiB;AAC7B;AACA,aAAOnB,WAAWkB,WAAX,CAAuBR,KAAvB,EAA8BU,IAA9B,CAAmC,YAAM;AAC9CD,eAAO,WAAP,EAAoBT,KAApB;AACD,OAFM,CAAP,CAF6B,CAK7B;AACD,KARM;AASP;AACAW,eAVO,qCAUoC;AAAA,UAA7BF,MAA6B,SAA7BA,MAA6B;AAAA,UAAjBG,OAAiB,SAAjBA,OAAiB;AAAA,UAARC,IAAQ,SAARA,IAAQ;AACzCvB,iBAAWwB,SAAX,CAAqBF,OAArB,EAA8BC,IAA9B,EACGH,IADH,CACQ,oBAAY;AAChBD,eACE,kBADF,EAEEM,SAASC,SAASC,OAAT,CAAiB,eAAjB,CAAT,CAFF;AAIAR,eAAO,YAAP,EAAqBO,SAASE,IAA9B;AACD,OAPH,EAQGC,KARH,CAQS,iBAAS;AACdC,gBAAQC,GAAR,CAAY,wBAAwBC,MAAMN,QAA1C;AACD,OAVH;AAWD,KAtBM;AAuBPO,cAvBO,6BAuByB5B,EAvBzB,EAuB6B;AAAA,UAAvBc,MAAuB,SAAvBA,MAAuB;AAAA,UAAfe,OAAe,SAAfA,OAAe;AAClC,UAAIxB,QAAQwB,QAAQC,YAAR,CAAqB9B,EAArB,CAAZ;;AACA,UAAIK,KAAJ,EAAW;AACTS,eAAO,WAAP,EAAoBT,KAApB;AACD,OAFD,MAEO;AACLV,mBAAWoC,QAAX,CAAoB/B,EAApB,EACE;AADF,SAGGe,IAHH,CAGQ,oBAAY;AAChBD,iBAAO,WAAP,EAAoBO,SAASE,IAA7B;AACD,SALH,EAMGC,KANH,CAMS,iBAAS;AACdC,kBAAQC,GAAR,CAAY,wBAAwBC,KAApC;AACD,SARH;AASD;AACF;AAtCM,GAlCmB;AA0E5BE,WAAS;AACPC,kBAAc;AAAA,aAAS,cAAM;AAC3B,eAAOhC,MAAMM,MAAN,CAAa4B,IAAb,CAAkB;AAAA,iBAAS3B,MAAML,EAAN,KAAaA,EAAtB;AAAA,SAAlB,CAAP;AACD,OAFa;AAAA;AADP;AA1EmB,CAAf,CAAf","sourceRoot":"C:\\CodeAcademyGit\\lessons\\Lesson69\\vue-vuex","sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport ApiService from '@/api/AppApi'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n  state: {\r\n    user: { id: '123', name: 'John Doe' },\r\n    categories: [\r\n      'sustainability',\r\n      'nature',\r\n      'animal welfare',\r\n      'housing',\r\n      'education',\r\n      'food',\r\n      'community'\r\n    ],\r\n    eventsTotal: 0,\r\n    events: [],\r\n    event: {}\r\n  },\r\n  //sync - NO API/AXIOS/AJAX/FETCH calls!!!\r\n  mutations: {\r\n    // mutations with capslock and underscore\r\n    ADD_EVENT(state, event) {\r\n      state.events.push(event)\r\n    },\r\n    SET_EVENTS(state, events) {\r\n      state.events = events\r\n    },\r\n    SET_EVENT(state, event) {\r\n      state.event = event\r\n    },\r\n    SET_EVENTS_TOTAL(state, eventsTotal) {\r\n      state.eventsTotal = eventsTotal\r\n    }\r\n  },\r\n  // async - AXIOS/AJAX/FETCH :-)\r\n  // Form => Component => Actions => Mutations => State\r\n  actions: {\r\n    // snakeCase()\r\n    createEvent({ commit }, event) {\r\n      // add event to DB on the server (json-server/fake server)\r\n      return ApiService.createEvent(event).then(() => {\r\n        commit('ADD_EVENT', event)\r\n      })\r\n      // add event to our state via mutation\r\n    },\r\n    // limit,page (url)\r\n    fetchEvents({ commit }, { perPage, page }) {\r\n      ApiService.getEvents(perPage, page)\r\n        .then(response => {\r\n          commit(\r\n            'SET_EVENTS_TOTAL',\r\n            parseInt(response.headers['x-total-count'])\r\n          )\r\n          commit('SET_EVENTS', response.data)\r\n        })\r\n        .catch(error => {\r\n          console.log('Some error occurred' + error.response)\r\n        })\r\n    },\r\n    fetchEvent({ commit, getters }, id) {\r\n      var event = getters.getEventById(id)\r\n      if (event) {\r\n        commit('SET_EVENT', event)\r\n      } else {\r\n        ApiService.getEvent(id)\r\n          // if we have the event in our local store(Vuex store)\r\n\r\n          .then(response => {\r\n            commit('SET_EVENT', response.data)\r\n          })\r\n          .catch(error => {\r\n            console.log('Some error occurred' + error)\r\n          })\r\n      }\r\n    }\r\n  },\r\n  getters: {\r\n    getEventById: state => id => {\r\n      return state.events.find(event => event.id === id)\r\n    }\r\n  }\r\n})\r\n"]}]}